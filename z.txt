Notes:

df = pd.DataFrame(elist, columns=["source", "target", "weight"])

df[["source", "target"]] = df[["source", "target"]].astype("string")

df = pd.read_csv("del.csv", dtype={"source": "string", "target": "string"})

G = nx.from_pandas_edgelist(df_weighted_edges, "source", "target", edge_attr="weight")

G = nx.Graph()
G.add_weighted_edges_from(list)

R = nx.intersection(G1, G2)

df_edges.to_csv("output/{}/baseline/common_edges/common_edges_{}_{}.csv".format(exp, group, method), index=False)
nx.write_gexf(SG, "output/{}/baseline/common_edges/common_edges_{}_{}.gexf".format(exp, group, method))

df_edges = pd.read_csv("output/{}/baseline/common_edges/common_edges_{}_{}.csv".format(exp, group, method))
df_edges.head()

df_weighted_edges = pd.read_csv("output/{}/preprocessing/edges/edges_{}_{}.csv".format(exp, group, subgroup), dtype={"source": "string", "target": "string"})
    G = nx.from_pandas_edgelist(df_weighted_edges, "source", "target", edge_attr="weight")

#---
# elist = [(2, 1), (3, 2), (4, 1), (2, 4)]

elist = [(1, 2, 0.5), (2, 3, 0.6), (1, 4, 0.7), (2, 4, 0.8), (3, 4, 0.9), (4, 5, 1.0)]
df = pd.DataFrame(elist, columns=["source", "target", "weight"])
print(df.info())
print(df.head())
df[["source", "target"]] = df[["source", "target"]].astype("string")
print(df.info())
df.to_csv("del.csv", index=False)
# G1 = nx.Graph()
# G1.add_weighted_edges_from(elist)
G1 = nx.from_pandas_edgelist(df, edge_attr=["weight"])

print(G1.nodes())
print(G1.edges())

plt.figure(1,figsize=(2, 2)) 
nx.draw_networkx(G1)
plt.show()

G1.get_edge_data("2", "1", default=0)["weight"]
---
elist = [(1, 2, 0.5), (2, 3, 0.5), (1, 4, 0.5), (2, 4, 0.5)]
G2 = nx.Graph()
G2.add_weighted_edges_from(elist)

print(G2.nodes())
print(G2.edges())

plt.figure(1,figsize=(2, 2)) 
nx.draw_networkx(G2)
plt.show()
---
elist = [(1, 2, 0.5), (2, 3, 0.5), (1, 4, 0.5), (2, 4, 0.5)]
G3 = nx.Graph()
G3.add_weighted_edges_from(elist)

print(G3.nodes())
print(G3.edges())

plt.figure(1,figsize=(2, 2)) 
nx.draw_networkx(G3)
plt.show()
---
R = nx.intersection(G1, G2)

plt.figure(3,figsize=(2, 2)) 
nx.draw_networkx(R)
plt.show()
---
# connected pairs of nodes
list_graphs = [G1, G2, G3]
rename = [chr(k + 65) for k in range(len(list_graphs))]
list_edges = []

for k in range(len(list_graphs) - 1):
    nodes = list(list_graphs[k].nodes())
    for node in nodes:
        if list_graphs[k + 1].has_node(node):
            list_edges.append((rename[k] + str(node), rename[k + 1] + str(node), 0))
            # break

# U = nx.union(G1, G2, rename=("A", "B"))
# U = nx.full_join(G1, G2, rename=("A", "B"))
U = nx.union_all(list_graphs, rename=rename)

# append edges
U.add_weighted_edges_from(list_edges)

print()
print(list_edges)
print(U.nodes())
print(U.edges())

plt.figure(3,figsize=(6, 6)) 
nx.draw_networkx(U)
plt.show()
#---

MG.edges.data()

nx.set_edge_attributes(R, {(u, v): {"label": get_label(ed, th=0.8)} for u, v, ed in R.edges.data()})

!python del.py 2 ggg

df = nx.to_pandas_edgelist(G)

{
    "exp": "exp3",
    "method": "dgi",
    "dimension": 3,
    "groups_id": [
        "WT",
        "zwf1^",
        "pck1^"
    ],
    "subgroups_id": {
        "WT": [
            "1",
            "2",
            "3",
            "4",
            "5"
        ],
        "zwf1^": [
            "1",
            "2",
            "3"
        ],
        "pck1^": [
            "1",
            "2"
        ]
    },
    "option": {
        "WT": [
            "dyn"
        ],
        "zwf1^": [
            "dyn"
        ],
        "pck1^": [
            "dyn"
        ]
    }
}

train_vgae(graph, args, method, group, subgroup):

# Format files
dyn, str

Graph data:
- Nodes:    nodes_<group>_<subgroup>.csv
            nodes_<group>_<option>.csv

- Edges:    edges_<group>_<subgroup>.csv
            edges_<group>_<option>.csv

Embeddings:
- Nodes:    node-embeddings_<method>_<group>_<subgroup>.csv
            node-embeddings_<method>_<group>_<option>.csv

- Edges:    edge-embeddings_<method>_<group>_<subgroup>.csv
            edge-embeddings_<method>_<group>_<option>.csv

Common edges:
- Edges:    
